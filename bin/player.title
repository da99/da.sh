#!/usr/bin/env ruby
#
#

# NOTE: If player stopped, title and url will return nil
#   because `playerctl metadata` returns "No player could handle this command."
class Player
  class << self
    def all_names
      @all_names ||= `playerctl --list-all`.strip.split("\n")
    end

    def all
      @all ||= begin
                 first_pass = all_names
                   .reverse
                   .map { |name|
                     p = Player.new name
                     Window.all.detect { |w|
                       next unless p.pid 
                       if p.pid == w.pid
                         w.player_name = name
                         p.window = w
                       end
                     }
                     p
                   }.select(&:playing?)
                 second_pass = first_pass.map { |p|
                   if !p.pid
                     w = Window.all.detect { |w|
                       !w.player_name && w.wm_class == p.main_name
                     }
                     if w
                       w.player_name = p.name
                       p.window = w
                       p.pid = w.pid
                     end
                   end
                   p
                 }
               end
    end
  end # class

  attr_reader :name, :main_name, :instance_name
  attr_accessor :window
  attr_writer :pid

  def initialize(name)
    @name = name
    @window = nil
    @main_name, @instance_name = @name.split('.')
    @pid = if @instance_name
             @instance_name.sub("instance", '').to_i
           end
    @status = `playerctl -p #{name} status`.strip
  end

  def status
    return nil if @status == "No players found"
    @status
  end

  def playing?
    status === "Playing"
  end

  def title
    temp_title = case main_name
                 when 'vlc', 'smplayer'
                   window&.title
                 end
    temp_title || `playerctl -p #{name} metadata title`.strip
  end

  def pid
    @pid ||= instance_name && instance_name["instance"] && instance_name.sub("instance", "").to_i
  end

  def url
    return nil if playing?
    `playerctl -p #{name} metadata url`.strip
  end

  def local?
    return nil if playing?
    !url[/^\//].nil?
  end

  def summary
    "#{name} #{window&.win_id}/#{pid.inspect} #{window&.title.inspect}"
  end

end
# === class

class Window
  class << self
    def all
      @all ||= `wmctrl -lxp | tr -s ' '`.strip.split("\n").map do |line|
        _winid, desktop, *_rest = pieces = line.split
        if desktop.to_i.negative?
          nil
        else
          Window.new(*pieces)
        end
      end.compact
    end
    # === def
  end
  # ==== class self

  attr_reader :win_id, :pid, :wm_class, :instance_name, :title
  attr_accessor :player_name

  def initialize(raw_win_id, _desktop, raw_pid, raw_class_instance, _host, *title_pieces)
    @win_id = raw_win_id
    @pid = raw_pid.to_i
    @wm_class, @instance_name = raw_class_instance.split('.')
    @title = title_pieces.join(' ')
    @player_name = nil
  end

end
# === class

case ARGV.map(&:strip).join(' ')
when '-h', '--help', 'help'
  puts '  list'
  puts '  list titles'
  puts '  list playing titles'
  puts '  hud list playing titles'
  puts '  summary'


when 'list titles'
  Player.all.each { |p| puts p.title }

when 'list'
  Player.all.each { |p| puts "#{p.name} #{p.status} #{p.title}" }
when 'list playing titles'
  Player.all.select(&:playing?).each { |p| puts p.title }

when 'hud list playing titles'
  titles = Player.all.select(&:playing?).map(&:title)
  if titles.empty?
    puts ''
  else
    puts "  #{titles.join('  |  ')}   "
  end

when 'summary'
  Player.all.select(&:playing?).each { |p| puts p.summary }

else
  raise "Unknown option: #{ARGV.inspect}"

end
# === case
