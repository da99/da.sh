#!/usr/bin/env ruby
#
#
cmd = ARGV.map(&:strip).join(' ')

class BatteryNotify
  class << self
    @msg_id = nil
    def send(icon, title, body)
      cmd = ['notify-send']
      cmd << "--replace-id='#{@msg_id}'" unless @msg_id.nil?
      cmd << "--app-name='battery.monitor'"
      cmd << "--icon='#{icon}'"
      cmd << '--print-id'
      cmd << "--urgency='critical'"
      cmd << title.inspect
      cmd << body.inspect
      full_cmd = cmd.join ' '
      warn "Running @ #{Time.now}: #{full_cmd}"
      @msg_id = `#{full_cmd}`.strip
      warn "Message id: #{@msg_id}"
      @msg_id
    end

    def low(title, body)
      send('/usr/share/icons/hicolor/scalable/apps/xfce4-battery-low.svg', title, body)
    end

    def full(title, body)
      send '/usr/share/icons/hicolor/scalable/apps/xfce4-battery-full-charging.svg', title, body
    end

    def visible?
      !@msg_id.nil?
    end

    def clear
      return nil unless visible?

      `gdbus call --session -d org.freedesktop.Notifications -o /org/freedesktop/Notifications -m  org.freedesktop.Notifications.CloseNotification #{@msg_id} `
      old_msg_id = @msg_id
      @msg_id = nil
      old_msg_id
    end
  end # class << self
end # class

class Battery
  attr_reader :info

  def initialize
    @info = `upower -i /org/freedesktop/UPower/devices/battery_BAT0`.strip.split("\n").map(&:strip)
  end

  def state
    find('state: ').split(':').last.strip
  end

  def charging?
    state == 'charging'
  end

  def discharging?
    state == 'discharging'
  end

  def find(str)
    info.find { |line| line[str] }
  end

  def to_number
    l = find('percentage: ')
    if l
      l.strip.split(/\ +/).last.sub('%', '').to_i
    else
      0
    end
  end
end # class

case cmd

when '-h', '--help', 'help'
  puts 'battery.monitor -h|--help|help  - Show this message.'
  puts 'battery.monitor current         - Outputs an integer.'
  puts 'battery.monitor status          - Outputs combined charging status and integer.'
  puts 'battery.monitor watch'
  puts 'battery.monitor has battery'
  puts 'battery.monitor is charging'

when 'has battery'
  if `upower -e`['battery_BAT']
    exit 0
  else
    exit 1
  end

when 'is charging'
  batt = Battery.new
  if batt.state == 'charging'
    exit 0
  else
    exit 1
  end

when 'current'
  batt = Battery.new
  puts batt.to_number

when 'status'
  batt = Battery.new
  puts "#{batt.state} #{batt.to_number}"

when 'watch'
  Kernel.loop do
    batt = Battery.new

    if batt.charging?
      if batt.to_number > 95
        BatteryNotify.full("Battery Charged: #{batt.to_number}", 'Unplug charger.')
        sleep 5
        next
      end

      BatteryNotify.clear
      sleep 60
      next
    end # if charging?

    if batt.to_number > 25
      sleep 60
      next
    end

    if batt.to_number < 15
      `loginctl suspend`
      sleep 5
      next
    end

    if batt.to_number < 27
      BatteryNotify.low("LOW battery: #{batt.to_number}%", 'Plug in charger.')
      sleep(60)
      next
    end

    if batt.to_number > 91
      BatteryNotify.clear
      sleep 60
    end
  end # Kernel.loop
else
  raise "Unknown option: #{cmd}"
end

