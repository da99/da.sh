#!/usr/bin/env ruby
#
#

require 'socket'
PORT = 2001

class Storage
  attr_reader :storage, :expires
  def initialize
    @storage = {}
    @expires = {}
  end

  def set(k,v)
    storage[k] = v
  end

  def set_expire(k, str, v)
    case str
    when /^\d+s$/
      expires[k] = Time.now.to_i + str.sub('s', '').to_i
    when /^\d+m$/
      expires[k] = (str.sub('m', '').to_i * 60)
    when /^\d+h$/
      expires[k] = (str.sub('h', '').to_i * (60 * 60))
    else
      raise "Invalid expiration format: #{str}"
    end
    set k, v
  end

  def has_key?(k)
    !expired?(k)
  end

  def expired?(k)
    return true if !storage.has_key?(k)
    exp = expires[k] || -1
    return false if exp < 0
    puts "--- #{Time.now.to_i} #{exp}"
    if Time.now.to_i < exp
      false
    else
      storage.delete(k)
      puts storage.inspect
      true
    end
  end

  def get_default(k, default)
    if has_key?(k)
      get(k)
    else
      default
    end
  end

  def get(k)
    if has_key?(k)
      @storage[k]
    else
      nil
    end
  end

  def get_all
    storage.each_pair.map { |k,v|
      "#{k} #{v}"
    }.join("\n")
  end

  def get_existing(*keys)
    keys.map { |k|
      if has_key?(k)
        "#{k} #{V[k]}"
      end
    }.compact.join("\n")
  end
end # class

class Memory_Storage
  STORAGE = Storage.new
  class << self
    def run(cmd_args)
      cmd = cmd_args.first
      args = cmd_args[1..-1]
      case cmd
      when "set"
        STORAGE.set args.first, args[1..-1].join(' ')
      when "set-expire"
        STORAGE.set_expire [args.first], args[1], args[2..-1].join(' ')
      when "get-default"
        STORAGE.get_default(args.first, args[1..-1].join(' '))
      when "get-existing"
        STORAGE.get_existing(*args)
      when "get-expires"
        STORAGE.expires.each_pair.map { |k,v|
          s = "#{k} -> #{v} (#{v - Time.now.to_i})"
          puts s
          s
        }.join("\n")
      when "get"
        case args.first
        when "all"
          STORAGE.get_all
        else
          args.map { |k|
            "#{k} #{STORAGE.get(k)}"
          }.join("\n")
        end
      else
        "FAIL: Unknown command: #{cmd}"
      end
    end
  end # class
end # class

cmd_line = ARGV.map(&:strip).join(' ')

case cmd_line
when "help", "--help", '-h'
  cmd = "my.kv.ram"
  puts "  #{cmd}"
  puts "    Starts server."
  puts "  #{cmd} get all"
  puts "  #{cmd} get (key ... )"
  puts "  #{cmd} get-default (key) (value)"
  puts "  #{cmd} get-existing (key ... )"
  puts "  #{cmd} set (key) (value ..)"
when ""
  puts "=== Setting up a new server on: #{PORT}"
  server = TCPServer.open(PORT)
  loop {
    Thread.fork(server.accept) do |client|
      cmd_args = client.gets.strip.split
      result = Memory_Storage.run(cmd_args)
      puts "Result: #{result.inspect}"
      client.puts(result)
      client.close
    end
  }

else
  s = TCPSocket.open('localhost', 2001)
  s.puts(cmd_line)
  while line = s.gets
    result = line
    if result.index("FAIL:") == 0
      STDERR.puts result
      exit 1
    end
    puts result
  end
  s.close
end # case




