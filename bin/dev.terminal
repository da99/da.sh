#!/usr/bin/env ruby
#
#


require "open3"

USR1 = "/tmp/usr1.sh"
USR2 = "/tmp/usr2.sh"

def dev_pid
  pid = `pgrep -f '^alacritty.+dev.terminal run$'`.strip
  return pid.to_i unless pid.empty?
  nil
end # def

def win_id
  pid = dev_pid
  return nil unless pid
  raw = `wmctrl -lp | tr -s ' ' | cut -d' ' -f1,3 | grep -P ' #{pid}$'`.strip.split.first
  return nil if raw.empty?
  raw
end

def focus_window
  wid = win_id
  if wid
    `wmctrl -i -a #{wid}` 
    STDERR.puts "#{wid}"
  end
  STDERR.puts "No window found." if !wid
end

def usr(i)
  focus_window
  system("pkill -USR#{i} -f \"^ruby.+dev.terminal run$\"")
  $?
end # def

class Colorize
  class << self
    # colorization
    def colorize(color_code, str)
      "\e[#{color_code}m#{str}\e[0m"
    end

    def red(str)
      colorize(31, str)
    end

    def green(str)
      colorize(32, str)
    end

    def yellow(str)
      colorize(33, str)
    end

    def blue(str)
      colorize(34, str)
    end

    def pink(str)
      colorize(35, str)
    end

    def light_blue(str)
      colorize(36, str)
    end
  end # class
end # class

def setup_file(i)
  if !File.exists?("/tmp/usr#{i}.sh")
    `da.sh new zsh /tmp/usr#{i}.sh`
  end
end

cmd = ARGV.map(&:strip).join(' ')

case cmd

when "-h", "--help", "help"
  c = $PROGRAM_NAME || "dev.terminal"
  puts "#{c}"
  puts "#{c} run"
  puts "#{c} USR1|USR2"

when "USR1"
  exit usr(1).exitstatus
  
when "USR2"
  exit usr(2).exitstatus

when "window id"
  puts win_id

when "focus window"
  focus_window
  
when ""
  pid = dev_pid
  if pid
    STDERR.puts "Already running: #{pid}"
    exit 0
  end
  exec("alacritty",  "-e", $PROGRAM_NAME, "run")

when "run"
  setup_file(1)
  setup_file(2)
  cmd = USR1
  pid = false
  keep_running = true
  already_run = true
  STDERR.puts "#{$PROGRAM_NAME} pid #{Process.pid}"

  Signal.trap("INT") { keep_running = false; Process.kill("INT", pid) if pid }
  Signal.trap("TERM") { keep_running = false; Process.kill("INT", pid) if pid }
  Signal.trap("USR1") { already_run = false; cmd = USR1 }
  Signal.trap("USR2") { already_run = false; cmd = USR2 }

  while keep_running
    if already_run
      sleep 0.5
      next
    end
    puts ""
    puts "-------------- #{Time.now} ------------------"
    already_run = true
    Open3.popen3(cmd) do |i, o, e, stat|
      puts "#{cmd} PID: #{stat.pid}"
      pid = stat.pid
      Thread.new {
        e.each_line { |line|
          STDERR.puts Colorize.yellow(line.strip)
        }
      }
      Thread.new {
        o.each_line { |line|
          STDOUT.puts line.strip
        }
      }
      puts "ended: #{cmd}: #{stat.value.success?.inspect} #{Time.now}"
    end
    pid = nil
  end # while

  puts "Done: #{$PROGRAM_NAME} #{cmd.inspect} #{Time.now}"

else
  STDERR.puts "!!! Unknown option for #{$PROGRAM_NAME}: #{cmd}"
  exit 1
  
end # case




