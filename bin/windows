#!/usr/bin/env ruby
#
#
#
require "open3"
require "socket"
SERVER_PORT = 2002
cmd = ARGV.map(&:strip).join(' ')
WIN_LOG = "/tmp/windows.txt"
DEBUG = ENV["DEBUG"] || false


class Window

  attr_reader :win_id, :wm_class, :wm_instance, :title, :user_time,
    :position,
    :x, :y, :w, :h

  def initialize(raw_pieces)
    @win_id, _gravity, _x, _y, _w, _h, class_instance, _host, *titles  = raw_pieces
    @x = _x.to_i
    @y = _y.to_i
    @w = _w.to_i
    @h = _h.to_i
    @wm_class, @wm_instance = class_instance.split('.')
    @title = titles.join(' ')
    @user_time = DE.user_time_stamp
    @position = nil
    @position = begin
                  size = 10 # Compensates for window active/inactive borders.
                  Geo.positions.detect { |pos|
                    x.between?(pos.x - size, pos.x + size) &&
                      y.between?(pos.y - size, pos.y + size) &&
                      w.between?(pos.w - size, pos.w + size) &&
                      h.between?(pos.h - size, pos.h + size)
                  }&.nickname
                end
  end

  def user_time!
    @user_time = DE.user_time_stamp
  end

  def activate
    cmd = "wmctrl -i -a #{win_id}"
    puts cmd
    `#{cmd}`
  end

  def position=(str_or_position)
    @position = str_or_position
  end # def

  def next_window(dir = "under")
    list = DE.list

    if dir == "under"
      dir = position
    end

    dir_group = list.sort_by(&:user_time).reverse.select { |w| w.position == dir }
    found = false
    next_win = dir_group.detect { |w|
      if found
        true
      else
        found = w.win_id == win_id
        false
      end
    }
    next_win || dir_group.first
  end # def

  def move_to(new_position)
    d = DE.direction_to_object(new_position)
    @position = new_position
    cmd = case wm_class
          when "smplayer"
            c = DE.window_border # Compensate
            "wmctrl -i -r #{win_id} -e 0,#{d.x + c},#{d.y + c},#{d.w},#{d.h}"
          when "chromium"
            c = DE.window_border + 4 # Compensate
            "wmctrl -i -r #{win_id} -e 0,#{d.x},#{d.y},#{d.w + c},#{d.h + c}"
          else
            "wmctrl -i -r #{win_id} -e 0,#{d.x},#{d.y},#{d.w},#{d.h}"
          end
    puts cmd
    `#{cmd}`
  end # def

  def re_move
    return nil unless position
    move_to(position)
  end

  def summary
    "#{win_id} #{wm_class} #{position || "#{x},#{y},#{w},#{h}"} #{user_time}"
  end
end # class

class DE
  PIDS = []
  @@USER_TIME = 0

  class << self

    def window_border
      4
    end

    def user_time_stamp
      @@USER_TIME += 1
    end

    def send_message(*cmd)
      s = TCPSocket.open('localhost', SERVER_PORT)
      s.puts cmd.join(' ')
      while result = s.gets
        if result.index("FAIL:") == 0
          STDERR.puts result
        else
          puts result
        end
      end # while
      s.close
    end # def

    def run_client_cmd(cmd_array)
      cmd = cmd_array.join(' ')
      puts "RECEIVED: #{cmd}"
      case cmd

      when "close", "CLOSE"
        "CLOSE"

      when "re_move"
        Geo.re_init
        moved = list.map(&:re_move)
        "re_moved: #{moved.size}"

      when /^move [:A-Z0-9x]+ to .+$/
        id = (cmd_array[1] === ":ACTIVE:") ? active_id : cmd_array[1]
        dir = cmd_array[3]
        w = list.detect { |w| w.win_id === id }
        if w
          w.move_to(dir)
          "PASS: --- Window #{id} was move to: #{dir}"
        else
          "FAILED: window not found: #{id}"
        end

      when "print list"
        list.map(&:summary).join("\n")

      when /^print summary (Left|Right|Right_Top|Right_Bottom|Maximized)$/
        Kernel.const_get(cmd_array[2]).summary

      when "update list"
        update_list
        if DEBUG
          STDERR.puts "--- Updated client list:"
          list.each { |w|
            STDERR.puts w.summary
          }
        end
        "PASS: window list updated."
      else
        "FAIL: Unknown command: #{cmd.inspect}"
      end
    end # def

    def close!
      STDERR.puts "Closing server..."
      send_message("close")
      STDERR.puts "Server should be closed by now."
    end

    def server
      keep_running = true
      Signal.trap("INT") { Thread.new { close! } }
      Signal.trap("TERM") { Thread.new { close! } }
      puts "=== Setting up a new server on: #{SERVER_PORT}"
      server = TCPServer.open(SERVER_PORT)
      spy = Thread.new { DE.spy }
      spy.abort_on_exception = true
      while keep_running
        STDERR.puts "--- Waiting for new client..." if DEBUG
        client = server.accept
        STDERR.puts "--- Found new client..." if DEBUG
        cmd_args = client.gets.strip.split
        result = run_client_cmd(cmd_args)
        STDERR.puts("RESULT: #{result.inspect}") if DEBUG
        client.puts(result)
        client.close
        if result == "CLOSE"
          keep_running = false
          PIDS.each { |t|
            if t.alive?
              STDERR.puts "-- Killing: #{t.class.name} #{t.pid}"
              `kill -INT #{t.pid}`
            end
            sleep 0.5
          }
          spy.kill rescue nil
          break
        end
      end # while
      server.close rescue nil
      STDERR.puts "--- Server is closed."
    end # def

    def spy
      cmd = %w{xprop -spy -root _NET_CLIENT_LIST _NET_ACTIVE_WINDOW}
      Open3.popen2(*cmd) do |i, o, stat|
        i.close
        PIDS.push stat
        puts "#{cmd.join ' '} PID: #{stat.pid}"
        pid = stat.pid
        o.each_line { |line|
          puts line.inspect
          case line
          when "_NET_ACTIVE_WINDOW(WINDOW): window id # 0x0"
          when /^_NET_CLIENT_LIST.WINDOW../
            STDERR.puts("--- Opening new client: #{SERVER_PORT}") if DEBUG
            s = TCPSocket.open('localhost', SERVER_PORT)
            s.puts("update list")
            STDERR.puts("SENT: update list") if DEBUG
            result = s.gets
            s.close
            STDERR.puts("RESULT: #{result}") if DEBUG
            STDERR.puts("--- Closing client: #{SERVER_PORT}") if DEBUG
            if result.index("FAIL:") == 0
              STDERR.puts result
            end
          when /^_NET_ACTIVE_WINDOW/
            active&.user_time!
          else # Window is actibe
            STDERR.puts "!!! Unknown xprop result: #{line}"
          end
        }
        puts "ended #{cmd.first}: #{stat.value.success?.inspect}"
      end
    end # def

    def by_id(raw_id)
      id = if raw_id == ":ACTIVE:"
             active_id
           else
             raw_id
           end
      list.detect { |w| w.win_id == id }
    end

    def list
      @list ||= begin
                   `wmctrl -lxG`.strip.split("\n").map { |line| 
                     pieces = line.split(/\ +/)
                     if pieces[1] != "-1"
                       w = Window.new(pieces)
                       w.position
                       w
                     else
                       nil
                     end
                   }.compact
                 end
    end # def

    def update_list
      @list = nil
      list
    end # def

    def active_id
      id = `wmctrl -a :ACTIVE: -v 2>&1`.strip.split.last
      return id if id["0x"]
    end

    def active
      win_id = active_id
      return nil unless win_id
      list.detect { |w| w.win_id == win_id }
    end

    def direction_to_object(str)
      case str
      when "right_top"
        Right_Top

      when "right_bottom"
        Right_Bottom

      when "maximize"
        Maximized

      when "right"
        Right

      when "left"
        Left
      else
        raise "Unknown direction: #{str.inspect}"
      end
    end

    def move(active_id, direction)
      send_message("move #{active_id} to #{direction}")
    end
  end # class self
end # class

class Margin
  class << self
    def padding
      15
    end

    def top
      40
    end

    def left
      46
    end

    def bottom
      20
    end

    def right
      20
    end

  end # class
end # class

module Position
  def nickname
    self.name.downcase
  end
  def summary
    "#{nickname} #{x},#{y},#{w},#{h}"
  end
end # class

class Maximized
  class << self
    include Position
    def x
      Margin.left
    end

    def y
      Margin.top
    end

    def w
      (Geo.w - Margin.left - Margin.right).to_i
    end

    def h
      Left.h
    end
  end # class self
end # class

class Left
  class << self
    include Position
    def x
      Margin.left
    end

    def y
      Margin.top
    end

    def w
      ((Geo.w - Margin.left - Margin.right) * 0.70).to_i - Margin.padding
    end

    def h
      (Geo.h - Margin.top - Margin.bottom) - Margin.padding
    end
  end # class self
end # class

class Right

  class << self
    include Position
    def x
      Left.x + Left.w + Margin.padding
    end

    def y
      Left.y
    end

    def w
      Geo.w - x - Margin.right
    end

    def h
      Left.h + Margin.bottom
    end
  end # class
end # class

class Right_Top
  class << self
    include Position
    def x
      Left.x + Left.w + Margin.padding
    end

    def y
      Left.y
    end

    def w
      Geo.w - x - Margin.right
    end

    def h
      (Left.h / 2).to_i - (Margin.padding * 4)
    end
  end # class
end # class

class Right_Bottom
  class << self
    include Position
    def x
      Right_Top.x
    end

    def y
      Right_Top.y + Right_Top.h + (Margin.padding * 1)
    end

    def w
      Right_Top.w
    end

    def h
      Geo.h - y - Margin.padding
    end
  end # class
end # class

class Geo
  POSITIONS = [Left, Right_Top, Right_Bottom, Right, Maximized]
  class << self

    def _init
      re_init if not defined? @raw_area
      @raw_area
    end

    def re_init
        @raw_area = `xprop -notype -len 16 -root _NET_DESKTOP_GEOMETRY`.split('=').last.split(',').map(&:strip).map(&:to_i)
        @screen_w, @screen_h = @raw_area
    end # def

    def positions
      POSITIONS
    end # def

    def current_name
      case "#{w} #{h}"
      when "2560 1440"
        "2k"
      when "1920 1080"
        "1080p"
      when "3840 2160"
        "4k"
      else
        raise "Unknown resolution: #{w} #{h}"
      end
    end # def

    def w
      _init
      @screen_w
    end

    def h
      _init
      @screen_h
    end

  end # class self
end # class


case cmd
when "help", "-h", "--help"
  puts "  "
  puts "    Starts server."
  puts "  close server"
  puts "  spy"
  puts "    Send messages to the server when window list is updated."
  puts "  list"
  puts "  list class [class]"
  puts "  list ids"
  puts "  list count"
  puts "  list is empty"
  puts "  active id"
  puts "  active title (padding) (max length)"
  puts "  screen geo name"
  puts "  move [id | :ACTIVE:] [right | right_top | right_bottom | left | maximize]"
  puts "  re_move"
  puts "  maximize"
  puts "  next [under|up|down|left|right] [id | :ACTIVE:]"

when ""
  DE.server

when "close server"
  STDERR.puts "--- Closing server..."
  DE.send_message("close")

when "spy"
  DE.spy

when "active id"
  puts DE.active_id

when "screen geo name"
  puts Geo.current_name

when "list"
  DE.list.each { |l|
    puts "#{l.win_id} #{l.wm_class} #{l.user_time} #{l.position || "unknown"} #{l.title}"
  }

when /^list class .+/
  target = ARGV[2]
  DE.list.each { |w|
    if w.wm_class == target
      puts w.win_id
    end
  }
when "list ids"
  DE.list.each { |w| puts w.win_id }

when "list count"
  id = DE.list.size
  if id
    puts id
  else
    exit 1
  end

when "list is empty"
  if DE.list.empty?
    exit 0
  else
    exit 1
  end

when /^move .+/
  DE.move(ARGV[1], ARGV[2])

when /^next under/
  win_id = ARGV[2] || ":ACTIVE:"
  current = DE.by_id(win_id)
  unless current
    STDERR.puts "No current window found: under #{win_id}"
    exit 0 
  end
  group = DE.list
    .select { |w| w.position == current.position }
    .sort_by(&:user_time)
    .reverse
  found = false
  next_win = group.detect { |w|
    if found
      true
    else
      found = w.win_id == current.win_id
      false
    end
  }
  if !next_win
    next_win = group.first
  end

  next_win.activate

when /^next [under|left|right_bottom|right_top|right]/
  dir = ARGV[1] || "under"
  win_id = ARGV[2] || ":ACTIVE:"
  current = DE.by_id(win_id)
  unless current
    STDERR.puts "No current window found: #{dir} #{win_id}"
    exit 0 
  end
  new_win = current.next_window(dir)
  unless new_win
    STDERR.puts "No new window found: next #{dir} #{win_id}"
    exit(0) 
  end
  new_win.activate


when "re_move"
  DE.send_message("re_move")

when /^active title(.+)?/
  _i, _j, padding, raw_max = ARGV
  padding ||= ""
  max = (raw_max || 250).to_i rescue 250
  title = `xtitle`.strip
  puts "#{padding}#{title[0,max]}#{padding}"

else
  STDERR.puts "!!! Unknown option: #{cmd}"
  exit 1
end # cae

